//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('koapache', ["form-data","fs","@tech_query/node-toolkit","@babel/polyfill","koa","koa-logger","koa-body","@koa/cors","koa-static","internal-ip","opn","url","path","child_process"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory(require('form-data'),require('fs'),require('@tech_query/node-toolkit'),require('@babel/polyfill'),require('koa'),require('koa-logger'),require('koa-body'),require('@koa/cors'),require('koa-static'),require('internal-ip'),require('opn'),require('url'),require('path'),require('child_process'));
    else
        return  this['koapache'] = factory(this['form-data'],this['fs'],this['@tech_query/node-toolkit'],this['@babel/polyfill'],this['koa'],this['koa-logger'],this['koa-body'],this['@koa/cors'],this['koa-static'],this['internal-ip'],this['opn'],this['url'],this['path'],this['child_process']);

})(function (form_data,fs,_tech_query_node_toolkit,_babel_polyfill,koa,koa_logger,koa_body,_koa_cors,koa_static,internal_ip,opn,url,path,child_process) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = _require_.bind(null, './');

    function _require_(base, path) {

        var module = _module_[
                outPackage( path )  ?  path  :  ('./' + merge(base, path))
            ],
            exports;

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = require( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    _require_.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _module_ = {
  './ProxyAgent': {
    base: '.',
    dependency: [],
    factory: function factory(require, exports, module) {
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = _default;

      var _formData = _interopRequireDefault(require('form-data'));

      var _fs = require('fs');

      var _nodeToolkit = require('@tech_query/node-toolkit');

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      /**
       * @external {Context} https://github.com/koajs/koa/blob/master/docs/api/context.md
       */

      /**
       * @param {Context} context
       *
       * @return {FormData|Object|string}
       */


      function buildData(context) {
        if (/^Head|Get|Delete$/.test(context.method)) return '';
        var request = context.request;
        if (request.type !== 'multipart/form-data') return request.body;
        var form = new _formData.default();

        for (var key in request.fields) {
          form.append(key, request.fields[key]);
        }

        for (var _key in request.files) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = request.files[_key][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var file = _step.value;
              form.append(_key, (0, _fs.createReadStream)(file.path), file.name);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }

        return form;
      }
      /**
       * @param {string}  URL
       * @param {Context} context
       *
       * @return {IncomingMessage}
       */


      function pipe(_x, _x2) {
        return _pipe.apply(this, arguments);
      }
      /**
       * @param {Object} proxyMap
       *
       * @return {AsyncFunction} Koa middleware
       */


      function _pipe() {
        _pipe = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee2(URL, context) {
          var header, response, key;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  header = Object.assign({}, context.header);
                  delete header.host;
                  _context2.next = 4;
                  return (0, _nodeToolkit.request)(URL, context.method, header, buildData(context));

                case 4:
                  response = _context2.sent;
                  context.status = response.statusCode, context.message = response.statusMessage;

                  for (key in response.headers) {
                    if (key !== 'status') context.set(key.replace(/^\w|-\w/g, function (char) {
                      return char.toUpperCase();
                    }), response.headers[key]);
                  }

                  return _context2.abrupt("return", context.body = response);

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));
        return _pipe.apply(this, arguments);
      }

      function _default(proxyMap) {
        /**
         * @param {Context}  context
         * @param {Function} next
         *
         * @return {?IncomingMessage}
         */
        return (
          /*#__PURE__*/
          function () {
            var _ref = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee(context, next) {
              var URL, _path2, final;

              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      URL = context.path + context.request.search;
                      _context.t0 = regeneratorRuntime.keys(proxyMap);

                    case 2:
                      if ((_context.t1 = _context.t0()).done) {
                        _context.next = 9;
                        break;
                      }

                      _path2 = _context.t1.value;
                      final = URL.replace(proxyMap[_path2], _path2);

                      if (!(final !== URL)) {
                        _context.next = 7;
                        break;
                      }

                      return _context.abrupt("return", pipe(final, context));

                    case 7:
                      _context.next = 2;
                      break;

                    case 9:
                      _context.next = 11;
                      return next();

                    case 11:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }));

            return function (_x3, _x4) {
              return _ref.apply(this, arguments);
            };
          }()
        );
      }
    }
  },
  './WebServer': {
    base: '.',
    dependency: [],
    factory: function factory(require, exports, module) {
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      require('@babel/polyfill');

      var _koa = _interopRequireDefault(require('koa'));

      var _nodeToolkit = require('@tech_query/node-toolkit');

      var _koaLogger = _interopRequireDefault(require('koa-logger'));

      var _koaBody = _interopRequireDefault(require('koa-body'));

      var _ProxyAgent = _interopRequireDefault(require('./ProxyAgent'));

      var _cors = _interopRequireDefault(require('@koa/cors'));

      var _koaStatic = _interopRequireDefault(require('koa-static'));

      var _internalIp = _interopRequireDefault(require('internal-ip'));

      var _opn = _interopRequireDefault(require('opn'));

      var _url = require('url');

      var _path = require('path');

      var _child_process = require('child_process');

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      /**
       * Web server
       */


      var WebServer =
      /*#__PURE__*/
      function () {
        /**
         * @param {string}         [staticPath='.']
         * @param {number}         [netPort=0]
         * @param {boolean}        [XDomain=false]
         * @param {?Object}        proxyMap         - Same as the parameter of {@link patternOf}
         * @param {boolean|string} [openURL=false]
         */
        function WebServer(staticPath, netPort, XDomain, proxyMap, openURL) {
          _classCallCheck(this, WebServer);

          /**
           * @type {string}
           */
          this.staticPath = staticPath || '.';
          /**
           * @type {number}
           */

          this.netPort = +(netPort || 0);
          /**
           * @private
           *
           * @type {Application}
           */

          this.core = new _koa.default();
          /**
           * @type {boolean}
           */

          this.XDomain = XDomain;
          /**
           * @private
           *
           * @type {?Object}
           */

          this.proxyMap = (0, _nodeToolkit.patternOf)(proxyMap);
          /**
           * @private
           *
           * @type {boolean|string}
           */

          this.openPath = openURL;
          /**
           * @private
           *
           * @type {ServerAddress}
           */

          this.address = null;
          this.boot();
        }
        /**
         * @private
         */


        _createClass(WebServer, [{
          key: "boot",
          value: function boot() {
            this.core.use((0, _koaLogger.default)());
            if (this.proxyMap) this.core.use((0, _koaBody.default)({
              multipart: true
            })).use((0, _ProxyAgent.default)(this.proxyMap));
            if (this.XDomain) this.core.use((0, _cors.default)());
            this.core.use((0, _koaStatic.default)(this.staticPath));
          }
          /**
           * Origin URI
           *
           * @type {string}
           */

        }, {
          key: "localHost",

          /**
           * Create a server in the same Node.JS process
           *
           * @return {Server} HTTP server
           */
          value: function localHost() {
            var server = this;
            return this.core.listen(this.netPort,
            /*#__PURE__*/
            _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee3() {
              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      server.address = Object.assign(this.address(), {
                        family: 'IPv4',
                        address: _internalIp.default.v4.sync()
                      });

                      if (!process.send) {
                        _context3.next = 3;
                        break;
                      }

                      return _context3.abrupt("return", process.send({
                        type: 'ready',
                        data: server.address
                      }));

                    case 3:
                      console.info("Web server runs at ".concat(server.URL));

                      if (!server.openPath) {
                        _context3.next = 7;
                        break;
                      }

                      _context3.next = 7;
                      return (0, _opn.default)(server.openURL);

                    case 7:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }))).on('error', function (error) {
              if (process.send) process.send({
                type: 'error',
                data: error
              });else console.error(error);
            });
          }
          /**
           * Boot a server in a forked Node.JS process
           *
           * @return {Promise<ServerAddress>}
           */

        }, {
          key: "workerHost",
          value: function workerHost() {
            var child = (0, _child_process.fork)((0, _path.join)((0, _nodeToolkit.currentModulePath)(), '../../dist/koapache-cli'), [this.staticPath, '-p', this.netPort, this.XDomain && '--CORS'], {
              execArgv: []
            });
            return new Promise(function (resolve, reject) {
              child.on('message', function (event) {
                switch (event.type) {
                  case 'ready':
                    return resolve(event.data);

                  case 'error':
                    {
                      var error = event.data;
                      reject(Object.assign(new global[error.name](error.message), error));
                    }
                }
              });
            });
          }
        }, {
          key: "URL",
          get: function get() {
            var address = this.address;
            return address ? "http://".concat(address.address, ":").concat(address.port) : '';
          }
          /**
           * URL to open in default browser
           *
           * @type {string}
           */

        }, {
          key: "openURL",
          get: function get() {
            return typeof this.openPath !== 'string' ? this.URL : (0, _url.resolve)(this.URL, this.openPath);
          }
        }]);

        return WebServer;
      }();
      /**
       * @typedef {Object} ServerAddress
       *
       * @property {string} family  - `IPv4`
       * @property {string} address - IP address
       * @property {number} port    - Network listening port
       */

      /**
       * @external {Application} https://github.com/koajs/koa/blob/master/docs/api/index.md#application
       */


      exports.default = WebServer;
    }
  },
  'form-data': {
    exports: form_data
  },
  'fs': {
    exports: fs
  },
  '@tech_query/node-toolkit': {
    exports: _tech_query_node_toolkit
  },
  '@babel/polyfill': {
    exports: _babel_polyfill
  },
  'koa': {
    exports: koa
  },
  'koa-logger': {
    exports: koa_logger
  },
  'koa-body': {
    exports: koa_body
  },
  '@koa/cors': {
    exports: _koa_cors
  },
  'koa-static': {
    exports: koa_static
  },
  'internal-ip': {
    exports: internal_ip
  },
  'opn': {
    exports: opn
  },
  'url': {
    exports: url
  },
  'path': {
    exports: path
  },
  'child_process': {
    exports: child_process
  }
};

    return require('./WebServer');
});